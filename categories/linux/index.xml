<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on Int Maker</title>
    <link>https://intmaker.com/categories/linux/</link>
    <description>Recent content in Linux on Int Maker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 04 Jun 2017 13:26:08 +0000</lastBuildDate>
    
	<atom:link href="https://intmaker.com/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Dependency-driven development: forced OSS contributions</title>
      <link>https://intmaker.com/2017/dependency-driven-development-forced-oss-contributions/</link>
      <pubDate>Sun, 04 Jun 2017 13:26:08 +0000</pubDate>
      
      <guid>https://intmaker.com/2017/dependency-driven-development-forced-oss-contributions/</guid>
      <description>&lt;p&gt;It is such a relief when you app just works. Moreover, when it is open. My pet project &lt;a href=&#34;https://github.com/ribtoks/xpiks&#34;&gt;Xpiks&lt;/a&gt; is not only an open-source project itself, but it also uses a lot of the other open-source technologies inside. Qt framework, zlib, hunspell - to name just a few. A big deal is to make them work together. A much bigger deal to make them work together across different platforms (Xpiks is announced as cross-platform for Windows, OS X and Linux). The least problems you can expect - is a tricky build process or somebody&amp;rsquo;s typo in the Makefile which breaks the-other-system&amp;rsquo;s build.&lt;/p&gt;

&lt;p&gt;More often what you&amp;rsquo;ll encounter - is people building a huge pile of code working &lt;strong&gt;only&lt;/strong&gt; for their needs. Only for their server. Only for their version if libcurl. Only for x86 operating system. And then they open-source it to GitHub - much like a cemetery for projects with 1 star and 0 forks, decaying there until forgotten forever.&lt;/p&gt;

&lt;p&gt;This is how the initial joy of finding an open-source technology you needed is being replaced by a constant frustration of not just a need to slightly tweak some header file or Makefile, but to go the sources, read them, understand everything inside and fix. This is what I have encountered many times and what I did as well.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to keyword and upload photos/illustrations to microstocks</title>
      <link>https://intmaker.com/2015/how-to-keyword-and-upload-photosillustrations-to-microstocks/</link>
      <pubDate>Wed, 18 Nov 2015 14:20:07 +0000</pubDate>
      
      <guid>https://intmaker.com/2015/how-to-keyword-and-upload-photosillustrations-to-microstocks/</guid>
      <description>If you&amp;rsquo;re a photographer new to microstock photography, I highly reccomend you to embark this wonderful way of passive earning using your artworks. But I will suppose that you know what is this about and how basically use it. I would even suppose you&amp;rsquo;ve passed an exam on some stock agency and uploaded your first artworks. But did you know there&amp;rsquo;re plenty of stocks? And did you know it&amp;rsquo;s better to work with all major players of this industry?</description>
    </item>
    
    <item>
      <title>Building Hedgewars under OS X Yosemite</title>
      <link>https://intmaker.com/2014/building-hedgewars-under-os-x-yosemite/</link>
      <pubDate>Wed, 31 Dec 2014 13:23:20 +0000</pubDate>
      
      <guid>https://intmaker.com/2014/building-hedgewars-under-os-x-yosemite/</guid>
      <description>Ok, you considered to build Hedgewars by yourself. To be clear, I&amp;rsquo;m going to build 0.9.21 on 10.10 Yosemite on MacBook Pro with Retina. First of all, read official manual. After source code pull from Mercurial failed via hg command I considered downloading source on the Downloads page.
As original HowTo says, you should build Ogg and Vorbis, but while Ogg build succeeded, Vorbis said it can&amp;rsquo;t resolve u_int16_t type and after some googling I&amp;rsquo;ve found it was a known issue and you should replace #include  with #include  under #elfif (defined(__APPLE__) &amp;amp;&amp;amp; defined(__MACH__)) in file _ogg/ostypes.</description>
    </item>
    
    <item>
      <title>Simple Gimp plugin for batch processing in Python</title>
      <link>https://intmaker.com/2014/simple-gimp-plugin-for-batch-processing-in-python/</link>
      <pubDate>Wed, 12 Nov 2014 11:32:35 +0000</pubDate>
      
      <guid>https://intmaker.com/2014/simple-gimp-plugin-for-batch-processing-in-python/</guid>
      <description>&lt;p&gt;Not so far ago I needed to batch-process some images. The task was to resize them so they fit to given smallest resolution. Although Gimp has some batch-processing plugins, I wasn&amp;rsquo;t able to solve my problem with them. That&amp;rsquo;s why I&amp;rsquo;ve invented small little bike and I&amp;rsquo;d like to share with you workarounds and explanations of some Gimp plug-in development issues.&lt;/p&gt;

&lt;p&gt;Your plugin can take as little as just one python file with call to function &lt;em&gt;register&lt;/em&gt; (&lt;em&gt;from gimpfu&lt;/em&gt;) and passing to it some metadata and actual method of plugin. You can read more about parameters to register on &lt;a title=&#34;Official python Gimp API&#34; href=&#34;http://www.gimp.org/docs/python/index.html&#34; target=&#34;_blank&#34;&gt;official docs website&lt;/a&gt;. But a few moments still need clarifications.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to process Nikon D5300 NEF and other unsupported RAW formats in Darktable</title>
      <link>https://intmaker.com/2014/how-to-process-nikon-d5300-nef-and-other-unsupported-raw-formats-in-darktable/</link>
      <pubDate>Tue, 09 Sep 2014 12:26:07 +0000</pubDate>
      
      <guid>https://intmaker.com/2014/how-to-process-nikon-d5300-nef-and-other-unsupported-raw-formats-in-darktable/</guid>
      <description>My favorite tool, Darktable, does not support new Nikon D5300 NEF format and, obviously, a lot of other RAW formats due to proprietary software for them. But there is a solution. There is a free tool from Adobe for Windows and Mac: DNG converter, which is free and converts a lot (almost all, I guess) of proprietary RAW formats to DNG (Digital NeGative - open lossless raw format. Complete list of supported RAW formats for DNG Converter.</description>
    </item>
    
    <item>
      <title>TeamCity 8 on CentOS 6.4 from scratch</title>
      <link>https://intmaker.com/2013/teamcity-8-on-centos-6-4-from-scratch/</link>
      <pubDate>Tue, 26 Nov 2013 16:22:43 +0000</pubDate>
      
      <guid>https://intmaker.com/2013/teamcity-8-on-centos-6-4-from-scratch/</guid>
      <description>&lt;p&gt;In this post I&amp;rsquo;ll describe whole TeamCity installation process on a fresh CentOS (on the moment I&amp;rsquo;m writing it&amp;rsquo;s 6.4) for your private project or startup.&lt;/p&gt;

&lt;p&gt;First, proceed to the &lt;a title=&#34;Download CentOS&#34; href=&#34;http://www.centos.org/modules/tinycontent/index.php?id=30&#34; target=&#34;_blank&#34;&gt;CentOS downloads page&lt;/a&gt; and download CentOS distro through &lt;em&gt;.iso&lt;/em&gt;, &lt;em&gt;.torrent&lt;/em&gt; or &lt;em&gt;whatever-you-like&lt;/em&gt; and start the installation process. If you&amp;rsquo;re familiar with any  linux distro installation, it won&amp;rsquo;t take you much time to complete the installation. I&amp;rsquo;m using the minimal configuration without any Desktop Environment and with minimum core- and other system utils. Nonetheless, consider installing &lt;em&gt;iptables, elinks and java (openjdk)&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After the installation is over, login, add a user for yourself with &lt;em&gt;adduser&lt;/em&gt; and let&amp;rsquo;s start with TeamCity (maybe you&amp;rsquo;ll also consider adding yourself to the sudoers file).&lt;/p&gt;

&lt;p&gt;First, create &lt;em&gt;/opt/jetbrains/&lt;/em&gt; directory and &lt;a title=&#34;Download teamcity&#34; href=&#34;http://www.jetbrains.com/teamcity/download/index.html&#34; target=&#34;_blank&#34;&gt;download latest TeamCity&lt;/a&gt; using &lt;em&gt;wget&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;mkdir /opt/jetbrains
cd /opt/jetbrains
wget http://download.jetbrains.com/teamcity/TeamCity-8.0.5.tar.gz
tar -xpzf TeamCity-8.0.5.tar.gz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now lets create a system user (e.g. no home directory) for TeamCity to resolve security issues correctly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;adduser -r teamcity
passwd teamcity
chown -R teamcity:teamcity TeamCity&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;rsquo;ll use PostgreSQL for the internal database for TeamCity. So let&amp;rsquo;s install postgresql packages (8.4 for CentOS 6.4). For details of the PostgreSQL installation please refer to &lt;a title=&#34;PostgreSQL installation&#34; href=&#34;http://wiki.postgresql.org/wiki/YUM_Installation&#34; target=&#34;_blank&#34;&gt;official webpage&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;yum install postgresql
service postgresql initdb
chkconfig postgresql on&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also edit the &lt;em&gt;/var/lib/pgsql/data/pg_hba.conf&lt;/em&gt; file to allow authorization from &lt;em&gt;localhost&lt;/em&gt;. Go to the end and replace &lt;em&gt;ident&lt;/em&gt; to &lt;em&gt;trust&lt;/em&gt; for &lt;em&gt;localhost&lt;/em&gt; in the configuration for hosts. Now lets create another user for the future TeamCity database and create a database for that user.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo -u postgres psql postgres
password postgres
sudo -u postgres createuser -D -A -P teamcity_user
sudo -u postgres createdb -O teamcity_user teamcity_db&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(D = Cannot create databases, A = Cannot add users, P = Force password prompt)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MediaWiki installation on a linux guest in the VirtualBox: how-to, tips &amp; tricks</title>
      <link>https://intmaker.com/2013/mediawiki-installation-on-guest-in-virtualbox-how-to-tips-tricks/</link>
      <pubDate>Fri, 22 Nov 2013 18:51:36 +0000</pubDate>
      
      <guid>https://intmaker.com/2013/mediawiki-installation-on-guest-in-virtualbox-how-to-tips-tricks/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve spend half of a day trying to get MediaWiki working on a VirtualBox for the internal project in the internal network. Looks like it&amp;rsquo;s done now and I want to share tips to help someone to spend less time in the future.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been installing and configuring MediaWiki 1.21 on the OpenSUSE 12.3, but all tips are valuable for any linux distro.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rails development environment in Emacs on OpenSuSE Linux</title>
      <link>https://intmaker.com/2013/rails-development-environment-in-emacs-on-opensuse-linux/</link>
      <pubDate>Tue, 29 Oct 2013 23:12:15 +0000</pubDate>
      
      <guid>https://intmaker.com/2013/rails-development-environment-in-emacs-on-opensuse-linux/</guid>
      <description>&lt;p&gt;Today we&amp;rsquo;ll set up a complete Ruby On Rails development environment on Linux. For an IDE we&amp;rsquo;ll use Emacs and for host system - OpenSUSE.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s install latest Ruby+Rails bundle before configuring Emacs. You can refer to &lt;a title=&#34;Rails on OpenSUSE 12.1&#34; href=&#34;http://alphacluster.wordpress.com/2012/03/29/rails-on-opensuse-12-1/&#34; target=&#34;_blank&#34;&gt;nice article&lt;/a&gt; on that. In short, you need get RVM and follow through script steps in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;span style=&#34;color: #0000ff;&#34;&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&gt;&lt;/span&gt; bash&lt;/span&gt; -s stable &lt; &lt;(&lt;span style=&#34;color: #0000ff;&#34;&gt;curl&lt;/span&gt; -s &lt;span style=&#34;color: #808000;&#34;&gt;https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer&lt;/span&gt;)&lt;/pre&gt;

&lt;p&gt;Then load path to installed RVM in current bash session:&lt;/p&gt;

&lt;pre&gt;&lt;span style=&#34;color: #000000;&#34;&gt;&gt;&lt;/span&gt; . ~/.bash_profile&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a bit frustrating that if bash finds a _.bash&lt;em&gt;profile&lt;/em&gt; file, it ignores &lt;em&gt;.bashrc&lt;/em&gt;, so be careful. Usually, I just move this one line from _.bash&lt;em&gt;profile&lt;/em&gt; to &lt;em&gt;.profile&lt;/em&gt; or &lt;em&gt;.bashrc&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then check requirements and install everything what is needed&lt;/p&gt;

&lt;pre&gt;&gt; rvm requirements&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s set ruby version to 2.0 and install rails (4):&lt;/p&gt;

&lt;pre&gt;&gt; rvm install 2.0
&gt; rvm use 2.0
&gt; gem install rails
&gt; gem install sqlite3&lt;/pre&gt;

&lt;p&gt;Now, when everything is ready, we can configure Emacs installation. I assume you&amp;rsquo;ve already installed emacs package via your favorite package manager.&lt;/p&gt;

&lt;p&gt;Then lets add some custom configuration file for ruby configs in the &lt;em&gt;.emacs.d&lt;/em&gt; directory, say &lt;em&gt;ruby-configuration.el&lt;/em&gt; and add it to your .emacs file using&lt;/p&gt;

&lt;pre&gt;(&lt;span style=&#34;color: #0000ff;&#34;&gt;load&lt;/span&gt; &lt;span style=&#34;color: #339966;&#34;&gt;&#34;~/.emacs.d/ruby-configuration.el&#34;&lt;/span&gt;)&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>