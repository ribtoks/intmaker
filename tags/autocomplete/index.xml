<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>autocomplete on Int Maker</title>
    <link>https://intmaker.com/tags/autocomplete/</link>
    <description>Recent content in autocomplete on Int Maker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 27 Mar 2016 22:07:35 +0000</lastBuildDate>
    
	<atom:link href="https://intmaker.com/tags/autocomplete/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing autocomplete for English in C&#43;&#43;</title>
      <link>https://intmaker.com/2016/implementing-autocomplete-for-english-in-c/</link>
      <pubDate>Sun, 27 Mar 2016 22:07:35 +0000</pubDate>
      
      <guid>https://intmaker.com/2016/implementing-autocomplete-for-english-in-c/</guid>
      <description>&lt;p&gt;When it comes to implementing autocompletion in C++ in some type of input field, the question is which algorithm to choose and where to get the source for completion. In this post I&amp;rsquo;ll try to answer both questions.&lt;/p&gt;

&lt;p&gt;As for the algorithm, SO gives us hints about tries, segment trees and others. You can find &lt;a href=&#34;http://dhruvbird.blogspot.com.ee/2010/09/very-fast-approach-to-search.html&#34; target=&#34;_blank&#34;&gt;good article&lt;/a&gt; about them. Author has implemented some of them in a repository called FACE (fastest auto-complete in the east). You can easily find it &lt;a href=&#34;https://github.com/duckduckgo/cpp-libface&#34; target=&#34;_blank&#34;&gt;on GitHub&lt;/a&gt;. This solution is used for the autocompletion in search engine Duck-Duck-Go which should tell you how good it is. Unfortunately their solution requires dependencies on &lt;code&gt;libuv&lt;/code&gt; and joyent &lt;code&gt;http-parser&lt;/code&gt;, which is not good in case you need just to integrate autocompletion functionality into your C++ application, but not build auto-complete server and send queries to it. Another drawback - &lt;code&gt;libuv&lt;/code&gt; and &lt;code&gt;cpp-libface&lt;/code&gt; itself fails to compile in Windows which is bad in case you&amp;rsquo;re building cross-platform solution.&lt;/p&gt;

&lt;p&gt;You can find out how to built FACE into your cross-platform C++ application below.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43; dev via Emacs 24 in Windows 7 (visual studio includes)</title>
      <link>https://intmaker.com/2013/c-dev-via-emacs-24-in-windows-7/</link>
      <pubDate>Wed, 13 Mar 2013 08:23:35 +0000</pubDate>
      
      <guid>https://intmaker.com/2013/c-dev-via-emacs-24-in-windows-7/</guid>
      <description>Recently I had issue with CEDET 1.1: semantic was not able to parse header files from Visual Studio, when using
(semantic-add-system-include &amp;ldquo;C:/Program Files/Microsoft Visual Studio 10.0/VS/Include&amp;rdquo; &amp;lsquo;c++-mode)
But after looking through Visual Stuio headers in Studio itself, I&amp;rsquo;ve found some headers with defines, which are new to semantic, so you have to add them after this system include in your .el files:
(defun windows-semantic-hook () (setq microsoft-base-dir &amp;quot;C:/Program Files (x86)/Microsoft Visual Studio 14.</description>
    </item>
    
  </channel>
</rss>