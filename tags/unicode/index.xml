<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unicode on Int Maker</title>
    <link>https://intmaker.com/tags/unicode/</link>
    <description>Recent content in unicode on Int Maker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 31 Mar 2017 13:59:09 +0000</lastBuildDate>
    
	<atom:link href="https://intmaker.com/tags/unicode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unicode support for avformat_open_input in Windows</title>
      <link>https://intmaker.com/2017/unicode-support-for-avformat_open_input-in-windows/</link>
      <pubDate>Fri, 31 Mar 2017 13:59:09 +0000</pubDate>
      
      <guid>https://intmaker.com/2017/unicode-support-for-avformat_open_input-in-windows/</guid>
      <description>For those of us ever writing cross-platform application there has always been enough quires and quests to accomplish. Typical one is to correctly handle multibyte/unicode filepaths in Windows. And though they are handled pretty good in Qt, when you write your own library you have to do it yourself.
Another level of quests is using third-party libraries which were not designed for cross-platform usage. For example if you wanted to use ffmpeg / libav libraries in Windows, you have to deal with lack of support of std::wstring parameters in the API.</description>
    </item>
    
  </channel>
</rss>