<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>problem on Int Maker</title>
    <link>https://intmaker.com/tags/problem/</link>
    <description>Recent content in problem on Int Maker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 29 Jul 2015 12:21:32 +0000</lastBuildDate>
    
	<atom:link href="https://intmaker.com/tags/problem/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Tips and tricks to improve performance of your ACM solution</title>
      <link>https://intmaker.com/2015/tips-and-tricks-to-improve-performance-of-your-acm-solution/</link>
      <pubDate>Wed, 29 Jul 2015 12:21:32 +0000</pubDate>
      
      <guid>https://intmaker.com/2015/tips-and-tricks-to-improve-performance-of-your-acm-solution/</guid>
      <description>Here I gathered system-programming tricks that can improve performance of your solution in C++ dramatically!
 Use scanf/printf functions for standard IO instead of cin/cout Memory-align buffers and structures to WORD size of your architecture (4 bytes for 32-bit and 8 bytes for 64-bit) Use arrays instead of linked lists (to use memory block caching) Avoid &amp;ldquo;if&amp;rdquo; stamements in loops If-clause should contain code, which is more likely to execute (if-condition == true) Use inlining for short functions Use objects allocated on stack but not on heap (local objects for functions instead of allocated with malloc/new) Use pre-calculated hardcoded data (e.</description>
    </item>
    
    <item>
      <title>Interesting issues and features of Qt programming</title>
      <link>https://intmaker.com/2015/interesting-issues-and-features-of-qt-programming/</link>
      <pubDate>Thu, 16 Jul 2015 16:17:35 +0000</pubDate>
      
      <guid>https://intmaker.com/2015/interesting-issues-and-features-of-qt-programming/</guid>
      <description>In this post I enlist all interesting facts and issues I&amp;rsquo;ve experienced while developing my first project in Qt (from 5.3 to 5.4 5.6)
18.02 - QSettings interface in Qml transformed bool to string and was always true on deserialization
18.02 - QByteArray returned from local scope crashed with heap corruption on return of function (destructor of QByteArray)
Qt can delete your object in it&amp;rsquo;s gui loop. QObject should have CppManaged attribute and it should be set before returning object to UI code.</description>
    </item>
    
  </channel>
</rss>