<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>windows on Int Maker</title>
    <link>https://intmaker.com/tags/windows/</link>
    <description>Recent content in windows on Int Maker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 31 Mar 2017 13:59:09 +0000</lastBuildDate>
    
	<atom:link href="https://intmaker.com/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Unicode support for avformat_open_input in Windows</title>
      <link>https://intmaker.com/2017/unicode-support-for-avformat_open_input-in-windows/</link>
      <pubDate>Fri, 31 Mar 2017 13:59:09 +0000</pubDate>
      
      <guid>https://intmaker.com/2017/unicode-support-for-avformat_open_input-in-windows/</guid>
      <description>For those of us ever writing cross-platform application there has always been enough quires and quests to accomplish. Typical one is to correctly handle multibyte/unicode filepaths in Windows. And though they are handled pretty good in Qt, when you write your own library you have to do it yourself.
Another level of quests is using third-party libraries which were not designed for cross-platform usage. For example if you wanted to use ffmpeg / libav libraries in Windows, you have to deal with lack of support of std::wstring parameters in the API.</description>
    </item>
    
    <item>
      <title>Implementing autocomplete for English in C&#43;&#43;</title>
      <link>https://intmaker.com/2016/implementing-autocomplete-for-english-in-c/</link>
      <pubDate>Sun, 27 Mar 2016 22:07:35 +0000</pubDate>
      
      <guid>https://intmaker.com/2016/implementing-autocomplete-for-english-in-c/</guid>
      <description>&lt;p&gt;When it comes to implementing autocompletion in C++ in some type of input field, the question is which algorithm to choose and where to get the source for completion. In this post I&amp;rsquo;ll try to answer both questions.&lt;/p&gt;

&lt;p&gt;As for the algorithm, SO gives us hints about tries, segment trees and others. You can find &lt;a href=&#34;http://dhruvbird.blogspot.com.ee/2010/09/very-fast-approach-to-search.html&#34; target=&#34;_blank&#34;&gt;good article&lt;/a&gt; about them. Author has implemented some of them in a repository called FACE (fastest auto-complete in the east). You can easily find it &lt;a href=&#34;https://github.com/duckduckgo/cpp-libface&#34; target=&#34;_blank&#34;&gt;on GitHub&lt;/a&gt;. This solution is used for the autocompletion in search engine Duck-Duck-Go which should tell you how good it is. Unfortunately their solution requires dependencies on &lt;code&gt;libuv&lt;/code&gt; and joyent &lt;code&gt;http-parser&lt;/code&gt;, which is not good in case you need just to integrate autocompletion functionality into your C++ application, but not build auto-complete server and send queries to it. Another drawback - &lt;code&gt;libuv&lt;/code&gt; and &lt;code&gt;cpp-libface&lt;/code&gt; itself fails to compile in Windows which is bad in case you&amp;rsquo;re building cross-platform solution.&lt;/p&gt;

&lt;p&gt;You can find out how to built FACE into your cross-platform C++ application below.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How to keyword and upload photos/illustrations to microstocks</title>
      <link>https://intmaker.com/2015/how-to-keyword-and-upload-photosillustrations-to-microstocks/</link>
      <pubDate>Wed, 18 Nov 2015 14:20:07 +0000</pubDate>
      
      <guid>https://intmaker.com/2015/how-to-keyword-and-upload-photosillustrations-to-microstocks/</guid>
      <description>If you&amp;rsquo;re a photographer new to microstock photography, I highly reccomend you to embark this wonderful way of passive earning using your artworks. But I will suppose that you know what is this about and how basically use it. I would even suppose you&amp;rsquo;ve passed an exam on some stock agency and uploaded your first artworks. But did you know there&amp;rsquo;re plenty of stocks? And did you know it&amp;rsquo;s better to work with all major players of this industry?</description>
    </item>
    
    <item>
      <title>Configuring a user for restored/imported database in MS SQL Server</title>
      <link>https://intmaker.com/2015/configuring-a-user-for-restoredimported-database-in-ms-sql-server/</link>
      <pubDate>Thu, 26 Mar 2015 14:09:30 +0000</pubDate>
      
      <guid>https://intmaker.com/2015/configuring-a-user-for-restoredimported-database-in-ms-sql-server/</guid>
      <description>When you import or restore a database from bak file, you can have same problems as I had. Problems with user access and restoration of login schemes.
First of all, make sure SQL server is in Mixed Authentication mode (right click on SQL server connection and Security tab). Then create a new Login in top Security object, and memorize username and password for your connection string.
Then you can add a User in appropriate Security object of your database, also setting a Login to one you created just before.</description>
    </item>
    
    <item>
      <title>C&#43;&#43; dev via Emacs 24 in Windows 7 (visual studio includes)</title>
      <link>https://intmaker.com/2013/c-dev-via-emacs-24-in-windows-7/</link>
      <pubDate>Wed, 13 Mar 2013 08:23:35 +0000</pubDate>
      
      <guid>https://intmaker.com/2013/c-dev-via-emacs-24-in-windows-7/</guid>
      <description>Recently I had issue with CEDET 1.1: semantic was not able to parse header files from Visual Studio, when using
(semantic-add-system-include &amp;ldquo;C:/Program Files/Microsoft Visual Studio 10.0/VS/Include&amp;rdquo; &amp;lsquo;c++-mode)
But after looking through Visual Stuio headers in Studio itself, I&amp;rsquo;ve found some headers with defines, which are new to semantic, so you have to add them after this system include in your .el files:
(defun windows-semantic-hook () (setq microsoft-base-dir &amp;quot;C:/Program Files (x86)/Microsoft Visual Studio 14.</description>
    </item>
    
    <item>
      <title>Emacs 24.2 with Python and C&#43;&#43; bundle for Windows</title>
      <link>https://intmaker.com/2013/emacs-24-2-with-python-and-c-bundle-for-windows/</link>
      <pubDate>Sun, 10 Mar 2013 21:36:35 +0000</pubDate>
      
      <guid>https://intmaker.com/2013/emacs-24-2-with-python-and-c-bundle-for-windows/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve managed to put together some interesting things with Emacs for Windows. For now we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Emacs 24.2 for Windows&lt;/li&gt;
&lt;li&gt;CEDET-1.1&lt;/li&gt;
&lt;li&gt;Auto-Complete 1.3.1&lt;/li&gt;
&lt;li&gt;Custom themes (using tango in current zip)&lt;/li&gt;
&lt;li&gt;Ocaml support (ocaml mode, eval and highlighting)&lt;/li&gt;
&lt;li&gt;Git user interface 1.0 support (with git blame)&lt;/li&gt;
&lt;li&gt;Ropemacs + Pylint + Flymake (Python IDE + static analysis)&lt;/li&gt;
&lt;li&gt;Fixes for Cygwin, gnu and git pathes in Windows&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>