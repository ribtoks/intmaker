<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>generic on Int Maker</title>
    <link>https://intmaker.com/tags/generic/</link>
    <description>Recent content in generic on Int Maker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 19 Jun 2013 20:53:22 +0000</lastBuildDate>
    
	<atom:link href="https://intmaker.com/tags/generic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to write template-like data structure in pure C</title>
      <link>https://intmaker.com/2013/write-template-like-data-structures-in-pure-c/</link>
      <pubDate>Wed, 19 Jun 2013 20:53:22 +0000</pubDate>
      
      <guid>https://intmaker.com/2013/write-template-like-data-structures-in-pure-c/</guid>
      <description>&lt;p&gt;&lt;em&gt;Problem&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;write type-independent data structure (say, red-black tree, dynamic array etc.) in pure C (which means you cannot use templates and any other features)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Solution&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;First of all, lets create an interface of our &amp;ldquo;&lt;em&gt;generic&lt;/em&gt;&amp;rdquo; (or &amp;ldquo;&lt;em&gt;template&lt;/em&gt;&amp;rdquo;) type. We can interpret &lt;code&gt;void*&lt;/code&gt; as this unknown type and build some interface functions. It definitely has to have a &lt;code&gt;constructor&lt;/code&gt; and &lt;code&gt;destructor&lt;/code&gt;. Also, it can have a &lt;code&gt;comparator&lt;/code&gt; and kind of &lt;code&gt;print&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;So, we can define it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;span style=&amp;quot;color:#000080;&amp;quot;&amp;gt;typedef&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#008000;&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt;* (*&amp;lt;span style=&amp;quot;color:#008080;&amp;quot;&amp;gt;ConstructorFunc&amp;lt;/span&amp;gt;)(&amp;lt;span style=&amp;quot;color:#000080;&amp;quot;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#008000;&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt;*);
&amp;lt;span style=&amp;quot;color:#000080;&amp;quot;&amp;gt;typedef&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#008000;&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; (*&amp;lt;span style=&amp;quot;color:#008080;&amp;quot;&amp;gt;DestructorFunc&amp;lt;/span&amp;gt;)(&amp;lt;span style=&amp;quot;color:#008000;&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt;*);
&amp;lt;span style=&amp;quot;color:#000080;&amp;quot;&amp;gt;typedef&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#008000;&amp;quot;&amp;gt;int&amp;lt;/span&amp;gt; (*&amp;lt;span style=&amp;quot;color:#008080;&amp;quot;&amp;gt;CompareFunc&amp;lt;/span&amp;gt;)(&amp;lt;span style=&amp;quot;color:#000080;&amp;quot;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#008000;&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt;*, &amp;lt;span style=&amp;quot;color:#000080;&amp;quot;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#008000;&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt;*);
&amp;lt;span style=&amp;quot;color:#000080;&amp;quot;&amp;gt;typedef&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#008000;&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt; (*&amp;lt;span style=&amp;quot;color:#008080;&amp;quot;&amp;gt;PrintFunc&amp;lt;/span&amp;gt;)(&amp;lt;span style=&amp;quot;color:#000080;&amp;quot;&amp;gt;const&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#008000;&amp;quot;&amp;gt;void&amp;lt;/span&amp;gt;*);

&amp;lt;span style=&amp;quot;color:#000080;&amp;quot;&amp;gt;struct&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#3366ff;&amp;quot;&amp;gt;FuncFactory_struct&amp;lt;/span&amp;gt;
{
   &amp;lt;span style=&amp;quot;color:#3366ff;&amp;quot;&amp;gt;ConstructorFunc&amp;lt;/span&amp;gt; constructor;
   &amp;lt;span style=&amp;quot;color:#3366ff;&amp;quot;&amp;gt;CompareFunc&amp;lt;/span&amp;gt; compareFunc;
   &amp;lt;span style=&amp;quot;color:#3366ff;&amp;quot;&amp;gt;DestructorFunc&amp;lt;/span&amp;gt; destructorFunc;
   &amp;lt;span style=&amp;quot;color:#3366ff;&amp;quot;&amp;gt;PrintFunc&amp;lt;/span&amp;gt; printFunc;
};

&amp;lt;span style=&amp;quot;color:#000080;&amp;quot;&amp;gt;#define&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#008080;&amp;quot;&amp;gt;FuncFactory&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#000080;&amp;quot;&amp;gt;struct&amp;lt;/span&amp;gt; &amp;lt;span style=&amp;quot;color:#3366ff;&amp;quot;&amp;gt;FuncFactory_struct
&amp;lt;/span&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And about implementation details..&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>